{"version":3,"sources":["app.js"],"names":["undoArray","redoArray","updateDataInfo","putDataTabs","putDataColumns","putDataStrings","tabs","document","querySelectorAll","cont","forEach","tab","setAttribute","addTab","deleteActiveCell","section","querySelector","newTab","createElement","classList","add","innerHTML","appendChild","deleteTab","lastChild","remove","saveCommand","fn","revFn","keep","push","action","inverse","length","undo","lastCommand","pop","addActiveCell","index","redo","string","col","getActiveCell","addLine","tabElement","newCol","deleteLine","addBlankCol","blankCol","deleteBlankCol","cellElement","cell","parentElement","dataset","colElement","moveDown","moveUp","addEventListener","evt","key","textContent","JSON","stringify"],"mappings":"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","file":"app.js","sourcesContent":["const undoArray = [];\r\nconst redoArray = [];\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  putDataTabs();\r\n  putDataStrings();\r\n  putDataColumns();\r\n\r\n  document.addEventListener(\"keydown\", (evt) => {\r\n    const { string } = getActiveCell();\r\n    \r\n    switch (evt.key) {\r\n      case \"t\":\r\n        saveCommand(addTab, deleteTab);\r\n        addTab();\r\n        updateDataInfo();\r\n        break;\r\n      case \"q\":\r\n        undo();\r\n        break;\r\n      case \"e\":\r\n        redo();\r\n        break;\r\n      case \"Enter\":\r\n        saveCommand(addLine, deleteLine);\r\n        addLine();\r\n        updateDataInfo();\r\n        break;\r\n      case \"l\":\r\n        saveCommand(addBlankCol, deleteBlankCol);\r\n        addBlankCol();\r\n        updateDataInfo();\r\n        break;\r\n      case \"s\":\r\n        if (string !== \"6\") {\r\n          saveCommand(moveDown, moveUp);\r\n          moveDown();\r\n        }\r\n        break;\r\n      case \"w\":\r\n        if (string !== \"6\") {\r\n          saveCommand(moveUp, moveDown);\r\n          moveUp();\r\n        }\r\n        break;\r\n    }\r\n    const id = document.querySelector(\"#helper\");\r\n    id.textContent = JSON.stringify(undoArray);\r\n    const id2 = document.querySelector(\"#helper2\");\r\n    id2.textContent = JSON.stringify(redoArray);\r\n  });\r\n});\r\n\r\nfunction updateDataInfo() {\r\n  putDataTabs();\r\n  putDataColumns();\r\n  putDataStrings();\r\n}\r\n\r\nfunction putDataTabs() {\r\n  const tabs = document.querySelectorAll(\".tabs\");\r\n  let cont = 1;\r\n\r\n  tabs.forEach((tab) => {\r\n    tab.setAttribute(\"data-tab\", cont);\r\n    cont++;\r\n  });\r\n}\r\n\r\nfunction putDataColumns() {\r\n  const tabs = document.querySelectorAll(\".tabs__column\");\r\n  let cont = 1;\r\n\r\n  tabs.forEach((tab) => {\r\n    tab.setAttribute(\"data-col\", cont);\r\n    cont++;\r\n  });\r\n}\r\n\r\nfunction putDataStrings() {\r\n  const tabs = document.querySelectorAll(\".tabs__column .tabs__cell\");\r\n  let cont = 1;\r\n\r\n  tabs.forEach((tab) => {\r\n    tab.setAttribute(\"data-string\", cont);\r\n    cont++;\r\n\r\n    if (cont == 7) {\r\n      cont = 1;\r\n    }\r\n  });\r\n}\r\n\r\nfunction addTab() {\r\n  deleteActiveCell();\r\n\r\n  const section = document.querySelector(\".content__tabs\");\r\n  const newTab = document.createElement(\"div\");\r\n\r\n  newTab.classList.add(\"tabs\");\r\n\r\n  newTab.innerHTML = `\r\n  <div class=\"tabs__column\">\r\n    <span class=\"tabs__cell\">E</span>\r\n    <span class=\"tabs__cell\">B</span>\r\n    <span class=\"tabs__cell\">G</span>\r\n    <span class=\"tabs__cell\">D</span>\r\n    <span class=\"tabs__cell\">A</span>\r\n    <span class=\"tabs__cell\">E</span>\r\n  </div>\r\n  <div class=\"tabs__column\">\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n  </div>\r\n  <div class=\"tabs__column\">\r\n    <span class=\"tabs__cell tabs__cell-active\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n  </div>\r\n  `;\r\n\r\n  section.appendChild(newTab);\r\n}\r\n\r\nfunction deleteTab() {\r\n  const section = document.querySelector(\".content__tabs\");\r\n  const lastChild = section.lastChild;\r\n  lastChild.remove();\r\n}\r\n\r\nfunction saveCommand(fn, revFn, keep = true) {\r\n  undoArray.push({\r\n    action: {\r\n      fn,\r\n    },\r\n    inverse: {\r\n      revFn,\r\n    },\r\n  });\r\n\r\n  //When something it's added the the redo array is restarted. This because we only need the redo after a undo, not after adding something.\r\n  if (keep) {\r\n    redoArray.length = 0;\r\n  }\r\n}\r\n\r\nfunction undo() {\r\n  const lastCommand = undoArray.pop();\r\n\r\n  if (lastCommand) {\r\n    const fn = lastCommand.inverse.revFn;\r\n\r\n    const result = fn();\r\n\r\n    //We add this conditional to avoid multiple calls to the addActiveCell function. The function that is going to be called is the one that is inside fn()\r\n    if (result !== \"move\") {\r\n      addActiveCell(lastCommand.action.index);\r\n    }\r\n\r\n    //We add the undo function to the redo array\r\n    redoArray.push({\r\n      action: {\r\n        fn,\r\n      },\r\n      inverse: {\r\n        revFn: lastCommand.action.fn,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nfunction redo() {\r\n  const lastCommand = redoArray.pop();\r\n  const { string, col, tab } = getActiveCell();\r\n\r\n  if (lastCommand) {\r\n    const fn = lastCommand.inverse.revFn;\r\n    saveCommand(fn, lastCommand.action.fn, false); //False to avoid reset the redo\r\n\r\n    if (undoArray.length > 0) {\r\n      undoArray[undoArray.length - 1].action.index = { string, col, tab };\r\n    }\r\n\r\n    fn();\r\n    updateDataInfo();\r\n  }\r\n}\r\n\r\nfunction addLine() {\r\n  const { tabElement } = getActiveCell();\r\n\r\n  deleteActiveCell();\r\n\r\n  const newCol = document.createElement(\"div\");\r\n  newCol.classList.add(\"tabs__column\");\r\n  newCol.innerHTML = `\r\n    <span class=\"tabs__cell tabs__cell-active\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n  `;\r\n  tabElement.appendChild(newCol);\r\n}\r\n\r\nfunction deleteLine() {\r\n  const { tabElement } = getActiveCell();\r\n\r\n  tabElement.lastChild.remove();\r\n}\r\n\r\nfunction addBlankCol() {\r\n  const { tabElement } = getActiveCell();\r\n\r\n  deleteActiveCell();\r\n\r\n  const blankCol = document.createElement(\"div\");\r\n  const newCol = document.createElement(\"div\");\r\n\r\n  blankCol.classList.add(\"tabs__column\");\r\n  newCol.classList.add(\"tabs__column\");\r\n\r\n  blankCol.innerHTML = `\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n    <span class=\"tabs__cell\">|</span>\r\n  `;\r\n\r\n  newCol.innerHTML = `\r\n    <span class=\"tabs__cell tabs__cell-active\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n    <span class=\"tabs__cell\">-</span>\r\n  `;\r\n\r\n  tabElement.appendChild(blankCol);\r\n  tabElement.appendChild(newCol);\r\n}\r\n\r\nfunction deleteBlankCol() {\r\n  const { tabElement } = getActiveCell();\r\n\r\n  tabElement.lastChild.remove();\r\n  tabElement.lastChild.remove();\r\n}\r\n\r\nfunction deleteActiveCell() {\r\n  const { cellElement, string, col, tab } = getActiveCell();\r\n\r\n  if (undoArray.length > 0) {\r\n    undoArray[undoArray.length - 1].action.index = { string, col, tab };\r\n  }\r\n\r\n  cellElement.classList.remove(\"tabs__cell-active\");\r\n}\r\n\r\nfunction addActiveCell({ string, col, tab }) {\r\n  const currTab = document.querySelector(`div[data-tab='${tab}']`);\r\n  const currCol = currTab.querySelector(`div[data-col='${col}']`);\r\n  const currString = currCol.querySelector(`span[data-string='${string}']`);\r\n\r\n  currString.classList.add(\"tabs__cell-active\");\r\n}\r\n\r\nfunction getActiveCell() {\r\n  const cell = document.querySelector(\".tabs__cell-active\");\r\n  const col = cell.parentElement;\r\n  const tab = col.parentElement;\r\n\r\n  return {\r\n    string: cell.dataset.string,\r\n    col: col.dataset.col,\r\n    tab: tab.dataset.tab,\r\n    tabElement: tab,\r\n    colElement: col,\r\n    cellElement: cell,\r\n  };\r\n}\r\n\r\nfunction moveDown() {\r\n  const { cellElement, string, col, tab } = getActiveCell();\r\n\r\n  if (string !== \"6\") {\r\n    if (undoArray.length > 0) {\r\n      undoArray[undoArray.length - 1].action.index = { string, col, tab };\r\n    }\r\n    cellElement.classList.remove(\"tabs__cell-active\");\r\n    addActiveCell({ string: +string + 1, col, tab });\r\n  }\r\n  return \"move\";\r\n}\r\n\r\nfunction moveUp() {\r\n  const { cellElement, string, col, tab } = getActiveCell();\r\n\r\n  if (string !== \"1\") {\r\n    cellElement.classList.remove(\"tabs__cell-active\");\r\n    addActiveCell({ string: +string - 1, col, tab });\r\n  }\r\n  return \"move\";\r\n}\r\n"]}